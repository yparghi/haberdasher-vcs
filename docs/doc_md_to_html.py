#!/usr/bin/env python3

import sys


in_file = sys.argv[1]
out_file = sys.argv[2]
out = ''

# States. Do I need a stack for this?
(NORMAL, IN_CODE_BLOCK, IN_LIST) = (0, 1, 2)
state = NORMAL

(TEXT_NORMAL, IN_ITALICS, IN_CODE, IN_LINK_TEXT, IN_LINK_URL) = (0, 1, 2, 3, 4)
textState = NORMAL


def parseLine(line):
    global out
    textState = TEXT_NORMAL
    link_text = ''
    link_url = ''

    for c in line:
        if textState == IN_LINK_TEXT and c not in ('[', ']'):
            link_text += c

        elif textState == IN_LINK_URL and c not in ('(', ')'):
            link_url += c

        elif c == '_' and textState in (TEXT_NORMAL, IN_ITALICS):
            if textState == TEXT_NORMAL:
                textState = IN_ITALICS
                out += '<span class="textItalics">'
            elif textState == IN_ITALICS:
                textState = TEXT_NORMAL
                out += '</span>'

        elif c == '`':
            if textState == TEXT_NORMAL:
                textState = IN_CODE
                out += '<span class="textCode">'
            elif textState == IN_CODE:
                textState = TEXT_NORMAL
                out += '</span>'

        elif c == '[':
            link_text = ''
            textState = IN_LINK_TEXT
        elif c == ']' and textState == IN_LINK_TEXT:
            textState = IN_LINK_URL
        elif c == '(' and textState == IN_LINK_URL:
            link_url = ''
        elif c == ')' and textState == IN_LINK_URL:
            out += '<a href="%s">%s</a>' % (link_url, link_text)
            textState = TEXT_NORMAL

        else:
            out += htmlEscape(c)


def htmlEscape(text):
    thisOut = ''
    for c in text:
        if c == '<':
            thisOut += "&lt;"
        elif c == '>':
            thisOut += "&gt;"
        else:
            thisOut += c

    return thisOut


meta = {}
lines = open(in_file, 'r').readlines()

for line in lines:
    line = line.strip()

    if line.startswith('#META '):
        line = line[6:]
        (key, value) = line.split(':', 1)
        meta[key] = value
        continue


    if line.startswith('# '):
        out += '<h1 class="docH1">'
        # TODO: Make this all better and less wonky.
        out += htmlEscape(line[2:])
        out += '</h1>'
    elif line.startswith('## '):
        out += '<h2 class="docH2">'
        out += htmlEscape(line[3:])
        out += '</h2>'
    elif line.startswith('### '):
        out += '<h3 class="docH3">'
        out += htmlEscape(line[4:])
        out += '</h3>'

    elif line.startswith('- ') and state != IN_CODE_BLOCK:
        if state == NORMAL:
            state = IN_LIST
            out += '<ul>\n'
        out += '<li>'
        parseLine(line[2:])
    elif line == '' and state == IN_LIST:
        out += '</ul>'
        state = NORMAL

    elif line == '```' and state != IN_CODE_BLOCK:
        out += '<pre class="codeBlock">'
        state = IN_CODE_BLOCK
    elif line == '```' and state == IN_CODE_BLOCK:
        out += '</pre>'
        state = NORMAL
    elif state == IN_CODE_BLOCK:
        out += htmlEscape(line)

    elif line == '---':
        out += '<hr/>'

    elif line != '':
        out += '<p>'
        parseLine(line)

    out += '\n'



###### Main

meta_header = ""
for key in meta:
    meta_header += "<#assign %s = \"%s\">\n" % (key, meta[key])

html = """
<#-- DO NOT EDIT THIS FILE MANUALLY! It's generated by doc_md_to_html.py -->

<#import "/basefragments.ftlh" as basefragments>
<@basefragments.pageStart title />
<@basefragments.topNavBar />


<div id="mainDocDiv">

%s

</div> <!-- mainDocDiv -->
<@basefragments.footer />
<@basefragments.pageEnd />
"""

open(out_file, 'w').write((meta_header + html) % out)
print('Done.')

