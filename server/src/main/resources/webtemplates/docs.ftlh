
<#-- DO NOT EDIT THIS FILE MANUALLY! It's generated by doc_md_to_html.py -->

<#import "/basefragments.ftlh" as basefragments>
<@basefragments.pageStart title />
<@basefragments.topNavBar />


<div id="mainDocDiv">

<p><span class="textItalics">Questions? Email us at: <a href="mailto:support@haberdashervcs.com">support@haberdashervcs.com</a><span class="textItalics">

<h1 class="docH1">Getting started with Haberdasher</h1>

<p>Haberdasher is a version control system for huge repositories. By "huge" we mean huge files (up to 1GB) and millions of folders and commits. Data is stored on a central server -- ours, or you can self-host.

<p>Generally, you check out <span class="textItalics">part</span> of the repository, i.e. one or more folders. From there, the workflow is mostly like git (commit, push, merge) with some differences we'll go over.

<p>In a nutshell, the Haberdasher workflow is:

<ul>
<li><span class="textCode">hd init</span> to start a local repo, pointing at the server
<li><span class="textCode">hd checkout</span> to add a path from the server to your local repo
<li><span class="textCode">hd branch</span> to make a new branch off the <span class="textCode">main</span> branch
<li><span class="textCode">hd commit</span> to save a local commit on your local branch
<li><span class="textCode">hd push</span> to send your local branch to the server
<li><span class="textCode">hd merge</span> to merge your local branch to <span class="textCode">main</span> (say, after code review)
</ul>

<h2 class="docH2">Set-up and Installation</h2>

<p>Sign up on the website and make sure you can log in. In your <a href="/settings">Settings</a> page, generate a CLI access token and save it somewhere. You'll use it to set up your command-line client.

<p><a href="/download">Download the command-line client</a>. We don't have an installer yet, so just unzip it somewhere, and add it to your path if you like. The main executable is <span class="textCode">hd</span> in the root folder of the archive.

<p>Test it by running <span class="textCode">hd version</span>.


<h2 class="docH2">init</h2>

<p>Instead of downloading the entire repo like with <span class="textCode">git clone</span>, you run <span class="textCode">hd init</span> to create a local repo pointing at the server:

<pre class="codeBlock">
$ hd init vcs.haberdashervcs.com &lt;repo name&gt; &lt;CLI token from the website&gt;

$ cd &lt;repo name&gt;
</pre>

<p>This creates a dir for your repo, which you should <span class="textCode">cd</span> into. If you'd like, look inside the <span class="textCode">.hdlocal</span> dir there to see what metadata is created:
<ul>
<li><span class="textCode">hdlocal.conf</span> is a YAML file with your server configuration.
<li><span class="textCode">hdlocal.db</span> is a SQLite database that stores your commits, branches, files, etc.
</ul>

<h2 class="docH2">checkout</h2>

<pre class="codeBlock">
$ hd checkout /
</pre>

<p>"Check out" in Haberdasher means adding a path to your local repo. A newly created repo has only one path, <span class="textCode">/</span>. But later on, as your repo grows, you could check out <span class="textCode">/project1</span>, <span class="textCode">/project2</span>, <span class="textCode">/frontend/web_project1</span>, etc.

<p>In a new repo, <span class="textCode">/</span> is empty, so you won't see any new files. But you can confirm the checkout worked by running:

<pre class="codeBlock">
$ hd status
</pre>


<h2 class="docH2">branch</h2>

<p>The Haberdasher workflow is:
<ul>
<li>Do some work on a local branch.
<li>Push it to the server (for review or just to save it).
<li>Merge it into the <span class="textCode">main</span> branch when you're ready.
</ul>
<p>Initially, your repo is on the main branch. (You can confirm this with <span class="textCode">hd status</span>.) To start making changes, create a new branch for your work:

<pre class="codeBlock">
$ hd branch create &lt;name of your branch&gt;
</pre>

<p>And confirm it with <span class="textCode">hd status</span>.


<h2 class="docH2">commit</h2>

<p>Add a new file with whatever contents you like. You can view the changes with:
<pre class="codeBlock">
$ hd diff
</pre>

<p>You can save your changes with:
<pre class="codeBlock">
$ hd commit &lt;message&gt;
</pre>

<p>Confirm the change with any or all of these:

<ul>
<li><span class="textCode">hd status</span>
<li><span class="textCode">hd log</span>
<li><span class="textCode">hd diff</span>
</ul>
<p>Commit numbers are increasing integers. Your new repo starts at <span class="textCode">main:1</span>. Branch revisions go 0, 1, 2, 3... So your <span class="textCode">status</span> command should tell you you're at <span class="textCode">name_of_your_branch:1</span> after a single commit.

<p>A branch in Haberdasher has a <span class="textItalics">base commit</span>, which is the commit where you branched off of <span class="textCode">main</span>, and a <span class="textItalics">head commit</span>, which is the latest commit on the branch itself.


<h2 class="docH2">push</h2>

<pre class="codeBlock">
$ hd push
</pre>

<p><span class="textCode">push</span> sends your local branch to the server, where you can review it or others can download it to their own local repos. (See <span class="textCode">sync</span> in "Other commands" below.)

<p>If you go to the website, you should see the branch listed on your homepage now, where you can view its diff against <span class="textCode">main</span>.


<h2 class="docH2">merge</h2>

<pre class="codeBlock">
$ hd merge
</pre>

<p>When you attempt to merge your changes into <span class="textCode">main</span>, the server will look for conflicting changes since the branch's base commit. If there are conflicts, you'll get an error and instructions on running <span class="textCode">hd rebase</span>. (See "Other commands" below.)

<p>If there are no conflicts, the server updates <span class="textCode">main</span> with a merge commit. Then your local repo is switched to <span class="textCode">main</span> at the new commit. You can see this reflected in <span class="textCode">hd status</span>, in <span class="textCode">hd log</span>, or on the website by browsing <span class="textCode">main</span>.


<h2 class="docH2">Other commands</h2>

<h3 class="docH3">sync: Switch to a different revision</h3>

<pre class="codeBlock">
$ hd sync &lt;branch&gt;:&lt;commit&gt;
</pre>

<p>"Sync" is the Haberdasher verb for switching to a different revision, on this or another branch. Note that when you sync backwards in time, you won't be able to commit or push.

<p>When you sync, the client will download anything it needs from the server, like newer revisions if you sync forward.


<h3 class="docH3">rebase: Move the base commit forward on a branch</h3>

<pre class="codeBlock">
$ hd rebase main:&lt;commit&gt;
</pre>

<p>If you need to incorporate recent changes from main, due to a merge conflict or just to update your branch, you run <span class="textCode">rebase</span>.

<p>"Rebase" is a bit of a misnomer here, because the command will <span class="textItalics">merge in</span> newer commits from main into your local branch, rather than "replaying" your branch on top of a newer main:base. (Proper replaying or "fast-forward" rebasing is on our roadmap.)

<p>When you run <span class="textCode">rebase</span> with a newer main:commit, the output will list changed files, and any conflicting merges. You'll have to resolve merge conflicts by hand by opening the conflicted files in your editor.

<p>When you're done merging and you'd like to commit the rebase, run:
<pre class="codeBlock">
$ hd rebase commit
</pre>

<p>But if you'd rather revert the rebase and go back to your branch head, run:
<pre class="codeBlock">
$ hd rebase cancel
</pre>

<p>None of these changes are sent to the server -- you can <span class="textCode">hd push</span> your updated branch when you're ready.


<h2 class="docH2">Other features</h2>

<h3 class="docH3">.gitignore?</h3>

<p><span class="textCode">.gitignore</span> is replaced in Haberdasher with <span class="textCode">hdconfig</span> files you can put anywhere in your repo. Each <span class="textCode">hdconfig</span> file configures repo settings for files in or below its directory. Here's an example to ignore some paths:

<pre class="codeBlock">
---

ignoredPaths:
- '/ignorable/folder/'
- '/projects/python/*.pyc'
- '*.txt'
- '*/build/*'
</pre>

<p>Paths are from the root of the whole repo, starting with <span class="textCode">/</span>.


<h3 class="docH3">Licensing</h3>

<p>Haberdasher is licensed as <span class="textItalics">source available</span> under the <a href="https://polyformproject.org/licenses/internal-use/1.0.0/">Polyform Internal Use License</a>. In a nutshell, this license lets you modify and/or self-host Haberdasher for your team's internal use.

<p>You can also <a href="/browseHd">browse the HD code</a>.


</div> <!-- mainDocDiv -->
<@basefragments.footer />
<@basefragments.pageEnd />
